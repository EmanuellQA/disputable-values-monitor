ACTIVATE_TELLIOT_LOG_FILE="False" #True or False. Creates the "telliot_feeds.log" file' in the current working directory with the logs of telliot-feeds during price retrieval. If set to 'true' telliot will not output data in the console, only log them in the file. To see the output in real time, set it to 'false' (but it won't save the log to an external file automatically)

# telliot-core environment variables
ENV_NAME=testnet
NETWORK_ID=943
PULSE_TESTNET_RPC_URL="https://rpc.v4.testnet.pulsechain.com"
PULSE_MAINNET_RPC_URL="https://rpc.pulsechain.com"
PULSE_MAINNET_RPC_FAILOVER_URL="https://rpc-pulsechain.g4mm4.io"

# Telliot environment variables
PLS_SOURCE="weighted"
PLS_CURRENCY_SOURCES="dai"
PLS_LPS_ORDER="WPLS/DAI"
PLS_ADDR_SOURCES="0xf8077d17a58731b11de439e791cd01d1804e1d1f"
LP_PULSE_NETWORK_URL="https://rpc-testnet-pulsechain.g4mm4.io"
PULSEX_SUBGRAPH_URL="https://graph.v4.testnet.pulsechain.com"
FETCH_ADDRESS=0xC0573e2Fc47B26fb05097a553BBfcf0166bada0A

# DVM environment variables
INITIAL_BLOCK_OFFSET="0"
CHAIN_REORG="0"

# Twilio
MOCK_TWILIO=true
TWILIO_AUTH_TOKEN=
TWILIO_ACCOUNT_SID=
TWILIO_FROM="+1231231234"
ALERT_RECIPIENTS="+1231231234,+1231231234,+1231231234"

# AWS SES
MOCK_SES=true
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_REGION=us-east-1
AWS_SOURCE_EMAIL=user@example.com
AWS_DESTINATION_EMAILS="user1@example.com,user2@example.com"
AWS_TEAM_EMAILS="user1@example.com,user2@example.com"

# Slack
MOCK_SLACK=true
SLACK_WEBHOOK_URL="https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"
SLACK_WEBHOOK_HIGH="https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"
SLACK_WEBHOOK_MID="https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"
SLACK_WEBHOOK_LOW="https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"
HIGH_ALERTS='["DISPUTE_AGAINST_REPORTER", "BEGAN_DISPUTE", "REMOVE_REPORT", "ALL_REPORTERS_STOP", "TRANSACTION_REVERTED"]'
MID_ALERTS='["DISPUTABLE_REPORT", "REPORTER_STOP", "REORG_DETECTED"]'
LOW_ALERTS='["REPORTER_BALANCE", "DISPUTER_BALANCE"]'

#Where to send alerts to
NOTIFICATION_SERVICE=""

REPORTERS="0x0000000000000000000000000000000000000000,0x0000000000000000000000000000000000000000"
# REPORT_INTERVALS in seconds for REPORTERS - i-th interval for i-th reporter
REPORT_INTERVALS="900,900"
REPORT_TIME_MARGIN=60
REPORTERS_PLS_BALANCE_THRESHOLD="200,200"
REPORTERS_FETCH_BALANCE_THRESHOLD="200,200"
ALL_REPORTERS_INTERVAL="120"

DISPUTER_PLS_BALANCE_THRESHOLD="200"
DISPUTER_FETCH_BALANCE_THRESHOLD="200"

DISPUTE_RNG_QUERIES=False
